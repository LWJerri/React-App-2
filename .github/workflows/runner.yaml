name: CI & CD

on:
  push:
    branches:
      - "production"

jobs:
  setup:
    runs-on: self-hosted
    name: Setup Workflow
    outputs:
      repo_name: ${{ steps.repo-name.outputs.repo_name }}
    steps:
      - name: Set repository name in lowercase
        id: repo-name
        run: echo "repo_name=$(echo ${GITHUB_REPOSITORY##*/} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Set project directory
        id: project-dir
        run: echo "project_dir=${{ secrets.MOUNT_DIR }}/${{ steps.repo-name.outputs.repo_name }}" >> $GITHUB_OUTPUT

  ci-job:
    runs-on: self-hosted
    name: CI Job
    needs: setup
    env:
      REPO_NAME: ${{ needs.setup.outputs.repo_name }}
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.1.0
        with:
          gh-cli-version: 2.44.1

      - name: Check app for changes
        id: changes
        run: |
          SERVICE_PATH=$(echo ./apps/${{ matrix.service }})
          SERVICE_VARIABLE=$(echo ${{ matrix.service }})

          GIT_COMMITS_SIZE=$(git rev-list --count HEAD -- $SERVICE_PATH)
          GH_COMMITS_SIZE=$(gh variable list --json name,value -q ".[] | select(.name | test(\"$SERVICE_VARIABLE\"; \"i\")).value")

          if [[ $GIT_COMMITS_SIZE > $GH_COMMITS_SIZE ]]; then
            gh variable set $SERVICE_VARIABLE --body $GIT_COMMITS_SIZE

            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "updated=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.PIPELINE_TOKEN }}

      - name: Login to Docker Registry
        if: steps.changes.outputs.updated == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          registry: ${{ secrets.REGISTRY_URL }}

      - name: Build & Push app to Docker Registry
        if: steps.changes.outputs.updated == 'true'
        uses: docker/build-push-action@v4
        with:
          file: ${{ steps.changes.outputs.path }}/Dockerfile
          push: true
          tags: ${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_USERNAME }}/${{ env.REPO_NAME }}-${{ matrix.service }}:latest
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}

  cd-job:
    runs-on: self-hosted
    name: CD Job
    needs: [setup, ci-job]
    env:
      REPO_NAME: ${{ needs.setup.outputs.repo_name }}
      PROJECT_DIR: ${{ needs.setup.outputs.project_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          registry: ${{ secrets.REGISTRY_URL }}

      - name: Create/Open project directory
        shell: bash
        run: mkdir -p ${{ env.PROJECT_DIR }} && cd ${{ env.PROJECT_DIR }}

      - name: Creating a new docker-compose.yaml
        shell: bash
        run: |
          cd ${{ env.PROJECT_DIR }}

          cp ${{ github.workspace }}/docker-compose.prod.yaml docker-compose.yaml

          sed -i 's/$PORT/${{ secrets.PORT }}/g' docker-compose.yaml

      - name: Creating a new production .env
        shell: bash
        run: |
          cd ${{ env.PROJECT_DIR }}

          cat << 'EOF' > .env
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          PORT=${{ secrets.PORT }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          EOF

      - name: Run new Docker containers
        shell: bash
        run: |
          cd ${{ env.PROJECT_DIR }}

          docker compose pull
          docker compose up -d --remove-orphans
