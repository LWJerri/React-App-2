name: CI & CD

on:
  push:
    branches:
      - "production"

jobs:
  ci-job:
    strategy:
      matrix:
        service: [backend, frontend]

    runs-on: self-hosted
    name: CI Job
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.1.0
        with:
          gh-cli-version: 2.44.1

      - name: Check for changes
        id: changes
        run: |
          SERVICE_PATH=$(echo ./apps/${{ matrix.service }})
          SERVICE_VARIABLE=$(echo ${{ matrix.service }})

          GIT_COMMITS_SIZE=$(git rev-list --count HEAD -- $SERVICE_PATH)
          GH_COMMITS_SIZE=$(gh variable list --json name,value -q ".[] | select(.name | test(\"$SERVICE_VARIABLE\"; \"i\")).value")


          if [[ $GIT_COMMITS_SIZE > $GH_COMMITS_SIZE ]]; then
            gh variable set $SERVICE_VARIABLE --body $GIT_COMMITS_SIZE

            echo "path=$SERVICE_PATH" >> $GITHUB_OUTPUT
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "updated=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.PIPELINE_TOKEN }}

      - name: Setup QEMU
        if: steps.changes.outputs.updated == 'true'
        shell: bash
        run: sudo apt-get update && sudo apt-get install -y qemu-user-static

      - name: Setup Docker Buildx
        if: steps.changes.outputs.updated == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: steps.changes.outputs.updated == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}

      - name: Build & Push
        if: steps.changes.outputs.updated == 'true'
        uses: docker/build-push-action@v4
        with:
          file: ${{ steps.changes.outputs.path }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/task-manager-v2-${{ matrix.service }}:latest
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}

  cd-job:
    runs-on: self-hosted
    name: CD Job
    needs: ci-job
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}

      - name: Goto project directory
        shell: bash
        run: mkdir -p ${{ secrets.PROJECT_DIR }} && cd ${{ secrets.PROJECT_DIR }}

      - name: Download new docker-compose.yaml
        shell: bash
        run: |
          cd ${{ secrets.PROJECT_DIR }}

          HEAD_REF="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          FILE_URL="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$HEAD_REF/docker-compose.production.yaml"

          curl -H "Authorization: token ${{ secrets.PIPELINE_TOKEN }}" -o docker-compose.yaml $FILE_URL

          sed -i 's/$PORT/${{ secrets.PORT }}/g' docker-compose.yaml

      - name: Create new .env
        shell: bash
        run: |
          cd ${{ secrets.PROJECT_DIR }}

          cat << EOF > .env
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          PORT=${{ secrets.PORT }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          EOF

      - name: Run new Docker containers
        shell: bash
        run: |
          cd ${{ secrets.PROJECT_DIR }}

          docker compose pull
          docker compose up -d --remove-orphans
