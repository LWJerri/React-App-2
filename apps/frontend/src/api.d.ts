/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/boards/{id}/audit": {
    /**
     * Get audit log
     * @description This endpoint returns the history of actions within the board.
     */
    get: operations["BoardController_getAudit"];
  };
  "/boards": {
    /**
     * Get all the boards
     * @description This endpoint returns a list of all existing boards.
     */
    get: operations["BoardController_getBoards"];
    /**
     * Create a new board
     * @description This endpoint creates a new board in the database and returns the object of the created board.
     */
    post: operations["BoardController_createBoard"];
  };
  "/boards/{id}": {
    /**
     * Remove the board
     * @description This query removes the board from the database.
     */
    delete: operations["BoardController_deleteBoard"];
    /**
     * Edit the board
     * @description This endpoint edits a board in the database and returns an object with the updated board.
     */
    patch: operations["BoardController_patchBoard"];
  };
  "/boards/{boardId}/lists": {
    /**
     * Get the lists
     * @description This endpoint returns a list of all lists in the specified board.
     */
    get: operations["ListController_getLists"];
    /**
     * Create a list
     * @description This endpoint creates a new list in the database and returns an object with the new list.
     */
    post: operations["ListController_createList"];
  };
  "/boards/{boardId}/lists/{id}": {
    /**
     * Delete the list
     * @description This endpoint deletes the list in the database.
     */
    delete: operations["ListController_deleteList"];
    /**
     * Edit the list
     * @description This endpoint edits a list in the database and returns the edited list object.
     */
    patch: operations["ListController_patchList"];
  };
  "/boards/{boardId}/lists/{listId}/tasks": {
    /**
     * Get the tasks
     * @description This endpoint updates the list of all tasks assigned to the specified board and list.
     */
    get: operations["TaskController_getTasks"];
    /**
     * Create a task
     * @description This endpoint creates a new task in the database and returns a task object.
     */
    post: operations["TaskController_createTask"];
  };
  "/boards/{boardId}/lists/{listId}/tasks/{id}/audit": {
    /**
     * History of changes
     * @description This endpoint returns the change history for the specified task.
     */
    get: operations["TaskController_getAudit"];
  };
  "/boards/{boardId}/lists/{listId}/tasks/{id}": {
    /**
     * Get the task
     * @description This endpoint returns an object with a task.
     */
    get: operations["TaskController_getTask"];
    /**
     * Delete the task
     * @description This endpoint deletes a task in the database.
     */
    delete: operations["TaskController_deleteTask"];
    /**
     * Edit a task
     * @description This endpoint edits the task in the database and returns the updated task object.
     */
    patch: operations["TaskController_patchTask"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ResponseBoardAuditDto: {
      /**
       * @description What kind of action took place.
       * @example CREATE
       * @enum {string}
       */
      action: "CREATE" | "EDIT" | "DELETE";
      /**
       * @description The id of the board in which the change occurred.
       * @example clule8xke000008l91yi9d5gt
       */
      boardId: string;
      /**
       * @description The type of model in which the change occurred.
       * @example TASK
       * @enum {string}
       */
      relatedModel: "LIST" | "TASK";
      /**
       * @description The unique id of the record in which the update occurred.
       * @example clun97g8j000008kz2upaf5te
       */
      relatedId: string;
      /**
       * @description What field in the record was affected.
       * @example name
       */
      affectedField: string;
      /**
       * Format: date-time
       * @description The date on which the action was recorded.
       * @example 2024-04-07T16:42:16.148Z
       */
      createdAt: string;
      /** @description The state of the object after the update. */
      newState: components["schemas"]["ResponseListDto"] | components["schemas"]["ResponseTaskDto"];
      /** @description The state of the object before the update. */
      oldState: components["schemas"]["ResponseListDto"] | components["schemas"]["ResponseTaskDto"];
    };
    FallbackResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /**
       * @description Brief description of the error.
       * @example Not Found
       */
      error?: string;
    };
    ResponseBoardWithListFieldDto: {
      /**
       * @description A unique id in the database.
       * @example cluld4viq000008jv05sdhd54
       */
      id: string;
      /**
       * @description Title for the board.
       * @example Board #1
       */
      name: string;
      /**
       * Format: date-time
       * @description Date the board was created.
       * @example 2024-04-07T16:42:16.160Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Date of board update.
       * @example 2024-04-07T16:42:16.160Z
       */
      updatedAt: string;
      /**
       * @description How many lists does the board contain.
       * @example 1
       */
      list: number;
    };
    CreateBoardDto: {
      /**
       * @description Title for the board.
       * @example Board #1
       */
      name: string;
    };
    ResponseBoardDto: {
      /**
       * @description A unique id in the database.
       * @example cluld4viq000008jv05sdhd54
       */
      id: string;
      /**
       * @description Title for the board.
       * @example Board #1
       */
      name: string;
      /**
       * Format: date-time
       * @description Date the board was created.
       * @example 2024-04-07T16:42:16.160Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Date of board update.
       * @example 2024-04-07T16:42:16.160Z
       */
      updatedAt: string;
    };
    PatchBoardDto: {
      /**
       * @description Title for the board.
       * @example Board #1
       */
      name: string;
    };
    ResponseListWithTaskFieldDto: {
      /**
       * @description A unique id in the database.
       * @example clulf5uxj000008jwhq3g1x6m
       */
      id: string;
      /**
       * @description Title for the list.
       * @example Triage
       */
      name: string;
      /**
       * Format: date-time
       * @description Date the list was created.
       * @example 2024-04-07T16:42:16.147Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Date the list was updated.
       * @example 2024-04-07T16:42:16.147Z
       */
      updatedAt: string;
      /**
       * @description The id of the board to which the list is attached.
       * @example clulf690q000108jw8ezqf3rf
       */
      boardId: string;
      /**
       * @description Whether this list has been deleted within the board.
       * @example false
       */
      isDeleted: boolean;
      /**
       * @description How many tasks does this list contain.
       * @example 1
       */
      task: number;
    };
    CreateListDto: {
      /**
       * @description Title for the list.
       * @example Triage
       */
      name: string;
    };
    ResponseListDto: {
      /**
       * @description A unique id in the database.
       * @example clulf5uxj000008jwhq3g1x6m
       */
      id: string;
      /**
       * @description Title for the list.
       * @example Triage
       */
      name: string;
      /**
       * Format: date-time
       * @description Date the list was created.
       * @example 2024-04-07T16:42:16.147Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Date the list was updated.
       * @example 2024-04-07T16:42:16.147Z
       */
      updatedAt: string;
      /**
       * @description The id of the board to which the list is attached.
       * @example clulf690q000108jw8ezqf3rf
       */
      boardId: string;
      /**
       * @description Whether this list has been deleted within the board.
       * @example false
       */
      isDeleted: boolean;
    };
    PatchListDto: {
      /**
       * @description Title for the list.
       * @example Triage
       */
      name: string;
    };
    ResponseTaskDto: {
      /**
       * @description A unique id in the database.
       * @example clulj6xtd000f08lc56e6e4bv
       */
      id: string;
      /**
       * @description Title of task.
       * @example My awesome task ðŸ’–
       */
      name: string;
      /**
       * @description Detailed description for the task.
       * @example Lorem Ipsum is simply dummy text of the printing and typesetting industry.
       */
      description: string;
      /**
       * Format: date-time
       * @description The date by which the task must be completed.
       * @example 2024-04-07T16:42:16.148Z
       */
      dueAt: string;
      /**
       * @description Established task priority.
       * @example NORMAL
       * @enum {string}
       */
      priority: "LOW" | "NORMAL" | "HIGH" | "CRITICAL";
      /**
       * Format: date-time
       * @description Date the task was created.
       * @example 2024-04-07T16:42:16.148Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Date the task was updated.
       * @example 2024-04-07T16:42:16.148Z
       */
      updatedAt: string;
      /**
       * @description The id of the board to which the task is bound.
       * @example clulj77yr000g08lc8nql2i95
       */
      boardId: string;
      /**
       * @description The list id of the list to which the task is bound.
       * @example clulj7bal000h08lchj1x5hkb
       */
      listId: string;
    };
    OmitTypeClass: {
      /**
       * @description What kind of action took place.
       * @example CREATE
       * @enum {string}
       */
      action: "CREATE" | "EDIT" | "DELETE";
      /**
       * @description The id of the board in which the change occurred.
       * @example clule8xke000008l91yi9d5gt
       */
      boardId: string;
      /**
       * @description The type of model in which the change occurred.
       * @example TASK
       * @enum {string}
       */
      relatedModel: "LIST" | "TASK";
      /**
       * @description What field in the record was affected.
       * @example name
       */
      affectedField: string;
      /**
       * Format: date-time
       * @description The date on which the action was recorded.
       * @example 2024-04-07T16:42:16.148Z
       */
      createdAt: string;
      /** @description The state of the object after the update. */
      newState: components["schemas"]["ResponseTaskDto"];
      /** @description The state of the object before the update. */
      oldState: components["schemas"]["ResponseTaskDto"];
    };
    CreateTaskDto: {
      /**
       * @description Title of task.
       * @example My awesome task ðŸ’–
       */
      name: string;
      /**
       * @description Detailed description of the task.
       * @example Lorem Ipsum is simply dummy text of the printing and typesetting industry.
       */
      description: string;
      /**
       * @description The date by which the task must be completed.
       * @example 2024-04-07T16:42:16.171Z
       */
      dueAt: string;
      /**
       * @description Established task priority.
       * @example NORMAL
       * @enum {string}
       */
      priority: "LOW" | "NORMAL" | "HIGH" | "CRITICAL";
    };
    PatchTaskDto: {
      /**
       * @description Title of task.
       * @example My awesome task ðŸ’–
       */
      name?: string;
      /**
       * @description Detailed description of the task.
       * @example Lorem Ipsum is simply dummy text of the printing and typesetting industry.
       */
      description?: string;
      /**
       * @description The date by which the task must be completed.
       * @example 2024-04-07T16:42:16.171Z
       */
      dueAt?: string;
      /**
       * @description Established task priority.
       * @example NORMAL
       * @enum {string}
       */
      priority?: "LOW" | "NORMAL" | "HIGH" | "CRITICAL";
      /**
       * @description The new list id of the list to which the task should be moved.
       * @example clulj6jrz000e08lc13qofuyj
       */
      listId?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Get audit log
   * @description This endpoint returns the history of actions within the board.
   */
  BoardController_getAudit: {
    parameters: {
      path: {
        /**
         * @description The id of the board for which you want to retrieve the audit history.
         * @example clulefm59000108l9fnpr6w7t
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseBoardAuditDto"][];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Get all the boards
   * @description This endpoint returns a list of all existing boards.
   */
  BoardController_getBoards: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseBoardWithListFieldDto"][];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Create a new board
   * @description This endpoint creates a new board in the database and returns the object of the created board.
   */
  BoardController_createBoard: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBoardDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseBoardDto"];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Remove the board
   * @description This query removes the board from the database.
   */
  BoardController_deleteBoard: {
    parameters: {
      path: {
        /**
         * @description The id of the board to be deleted.
         * @example cluldezu7000108jnfpb9g3s5
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Edit the board
   * @description This endpoint edits a board in the database and returns an object with the updated board.
   */
  BoardController_patchBoard: {
    parameters: {
      path: {
        /**
         * @description The id of the board to be edited.
         * @example clulde05k000008jncx4qaduv
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchBoardDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseBoardDto"];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Get the lists
   * @description This endpoint returns a list of all lists in the specified board.
   */
  ListController_getLists: {
    parameters: {
      path: {
        /**
         * @description The id of the board for which lists are to be retrieved.
         * @example clulfeu4j000108jj6g84808l
         */
        boardId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseListWithTaskFieldDto"][];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Create a list
   * @description This endpoint creates a new list in the database and returns an object with the new list.
   */
  ListController_createList: {
    parameters: {
      path: {
        /**
         * @description The id of the board in which you want to create the list.
         * @example clulff7ng000208jjh0vt0ecd
         */
        boardId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateListDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseListDto"];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Delete the list
   * @description This endpoint deletes the list in the database.
   */
  ListController_deleteList: {
    parameters: {
      path: {
        /**
         * @description The id of the board in which you want to delete the list.
         * @example clulfhtn0000608jjc7t011sb
         */
        boardId: string;
        /**
         * @description The id of the list to be deleted.
         * @example clulfhnzr000508jjai8k7mfw
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Edit the list
   * @description This endpoint edits a list in the database and returns the edited list object.
   */
  ListController_patchList: {
    parameters: {
      path: {
        /**
         * @description The id of the board in which you want to edit the list.
         * @example clulfgx0j000408jjfmdz8fj7
         */
        boardId: string;
        /**
         * @description The id of the list to be edited.
         * @example clulfgqi0000308jja6j594sd
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchListDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseListDto"];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Get the tasks
   * @description This endpoint updates the list of all tasks assigned to the specified board and list.
   */
  TaskController_getTasks: {
    parameters: {
      path: {
        /**
         * @description The id of the board for which the task is to be retrieved.
         * @example cluljfxy2000108l3fl1h9fms
         */
        boardId: string;
        /**
         * @description The id of the list for which the task is to be retrieved.
         * @example cluljfu0k000008l3g2na0xxs
         */
        listId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseTaskDto"][];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Create a task
   * @description This endpoint creates a new task in the database and returns a task object.
   */
  TaskController_createTask: {
    parameters: {
      path: {
        /**
         * @description The id of the board for which you want to create a task.
         * @example cluljw8uo000008l51nnqgpfl
         */
        boardId: string;
        /**
         * @description The list id of the list for which you want to create a task.
         * @example cluljwc7w000108l55x0cavuq
         */
        listId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTaskDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseTaskDto"];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * History of changes
   * @description This endpoint returns the change history for the specified task.
   */
  TaskController_getAudit: {
    parameters: {
      path: {
        /**
         * @description The id of the board for which you want to retrieve a list of changes to the task.
         * @example cluljm763000208l3hwowdubx
         */
        boardId: string;
        /**
         * @description The id of the task for which you want to retrieve the change list.
         * @example cluljmee4000408l36cizegkh
         */
        id: string;
        /**
         * @description The list id of the list for which you want to retrieve a list of changes to the task.
         * @example cluljma62000308l3621napx3
         */
        listId: unknown;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["OmitTypeClass"][];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Get the task
   * @description This endpoint returns an object with a task.
   */
  TaskController_getTask: {
    parameters: {
      path: {
        /**
         * @description The id of the board for which the task is to be obtained
         * @example cluljum8z000008le778m5hvo
         */
        boardId: string;
        /**
         * @description The id of the list for which the task is to be retrieved
         * @example cluljuot0000108le2pwuehua
         */
        listId: string;
        /**
         * @description Task id.
         * @example cluljurao000208le92ij6366
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseTaskDto"];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Delete the task
   * @description This endpoint deletes a task in the database.
   */
  TaskController_deleteTask: {
    parameters: {
      path: {
        /**
         * @description The id of the board in which you want to delete the task.
         * @example clulk6wxu000308jy5hb78ug9
         */
        boardId: string;
        /**
         * @description The id of the list in which you want to delete the task.
         * @example clulk6zwj000408jyh8rz4vry
         */
        listId: string;
        /**
         * @description The id of the task to be deleted.
         * @example clulk72qn000508jy9x7457ep
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
  /**
   * Edit a task
   * @description This endpoint edits the task in the database and returns the updated task object.
   */
  TaskController_patchTask: {
    parameters: {
      path: {
        /**
         * @description The id of the board in which you want to edit the task.
         * @example clulk457i000008jy8vbq59nf
         */
        boardId: string;
        /**
         * @description The list id of the list in which you want to edit the task.
         * @example clulk4880000108jy8py40n8z
         */
        listId: string;
        /**
         * @description The id of the task to be edited.
         * @example clulk4bmk000208jy2n8o3521
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchTaskDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseTaskDto"];
        };
      };
      /** @description Response when request processing fails. */
      400: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
      /** @description Response when request processing fails. */
      500: {
        content: {
          "application/json": components["schemas"]["FallbackResponse"];
        };
      };
    };
  };
}
